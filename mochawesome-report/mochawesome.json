{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2021-08-03T10:35:48.379Z",
    "end": "2021-08-03T10:35:48.394Z",
    "duration": 15,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bcddc247-c686-44e6-8f97-b1470142fdf7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7cac6515-198d-4433-b748-bad43d1d23f9",
          "title": "Addition test",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/addition.test.js",
          "file": "/test/addition.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return sum ",
              "fullTitle": "Addition test Return sum ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(addition(10, 20, 30)).to.equal(60);",
              "err": {},
              "uuid": "a166782d-2968-4d45-86db-f0489a7a879b",
              "parentUUID": "7cac6515-198d-4433-b748-bad43d1d23f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detect empty inputs",
              "fullTitle": "Addition test Detect empty inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function () {\n  addition();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "6cf3d2d1-b43f-4983-a7fa-caa7ac5f5da6",
              "parentUUID": "7cac6515-198d-4433-b748-bad43d1d23f9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detects alphabet inputs",
              "fullTitle": "Addition test Detects alphabet inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  addition(\"a\", \"b\");\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "a8e058b2-9829-49cc-a858-3278019f5ce7",
              "parentUUID": "7cac6515-198d-4433-b748-bad43d1d23f9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a166782d-2968-4d45-86db-f0489a7a879b",
            "6cf3d2d1-b43f-4983-a7fa-caa7ac5f5da6",
            "a8e058b2-9829-49cc-a858-3278019f5ce7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7ea6a793-bc53-4fbf-a814-1053d62a59e1",
          "title": "Time Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/convertTime.test.js",
          "file": "/test/convertTime.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checks for invalid input",
              "fullTitle": "Time Converter Checks for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  convertTime(\"A\");\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "59185256-ab15-48cb-9460-7d24f7fbeec6",
              "parentUUID": "7ea6a793-bc53-4fbf-a814-1053d62a59e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contains properties {hours, minutes, seconds}",
              "fullTitle": "Time Converter Contains properties {hours, minutes, seconds}",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600)).to.have.property(\"hours\");\n// expect(convertTime(3600)).to.have.property(\"minutes\");\n// expect(convertTime(3600)).to.have.property(\"seconds\");\nexpect(convertTime(3600)).to.have.keys([\"hours\", \"minutes\", \"seconds\"]);",
              "err": {},
              "uuid": "5ccc2e48-2c3c-4d67-9e5a-45e033f06d1c",
              "parentUUID": "7ea6a793-bc53-4fbf-a814-1053d62a59e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check correct conversion",
              "fullTitle": "Time Converter Check correct conversion",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600).hours).to.be.equal(1);\nexpect(convertTime(3600)).to.deep.equal({\n  hours: 1,\n  minutes: 0,\n  seconds: 0,\n});",
              "err": {},
              "uuid": "15dbfeea-fe77-4cfe-9075-7a020c04e5a9",
              "parentUUID": "7ea6a793-bc53-4fbf-a814-1053d62a59e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "59185256-ab15-48cb-9460-7d24f7fbeec6",
            "5ccc2e48-2c3c-4d67-9e5a-45e033f06d1c",
            "15dbfeea-fe77-4cfe-9075-7a020c04e5a9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "20b8e814-ca82-4f7d-acb6-4217e9a7b65e",
          "title": "Frequency Counter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/frequencyCounter.test.js",
          "file": "/test/frequencyCounter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for all objects",
              "fullTitle": "Frequency Counter Check for all objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"aeiou\")).to.have.keys([\"a\", \"e\", \"i\", \"o\", \"u\"]);",
              "err": {},
              "uuid": "ebe5849f-2fab-420f-90ab-cb531e41d4d0",
              "parentUUID": "20b8e814-ca82-4f7d-acb6-4217e9a7b65e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for vowel frequency",
              "fullTitle": "Frequency Counter Check for vowel frequency",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"Surfboard\")).to.deep.equal({\n  a: 1,\n  e: 0,\n  i: 0,\n  o: 1,\n  u: 1,\n});",
              "err": {},
              "uuid": "83ca3af3-d688-42ea-bffd-6fd5bdc3d67c",
              "parentUUID": "20b8e814-ca82-4f7d-acb6-4217e9a7b65e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for invalid input",
              "fullTitle": "Frequency Counter Check for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  frequencyCounter(123);\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "a52e186e-76d6-47e8-b527-5f52f6251844",
              "parentUUID": "20b8e814-ca82-4f7d-acb6-4217e9a7b65e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ebe5849f-2fab-420f-90ab-cb531e41d4d0",
            "83ca3af3-d688-42ea-bffd-6fd5bdc3d67c",
            "a52e186e-76d6-47e8-b527-5f52f6251844"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "383e0bf7-667f-4070-828e-c04526c1021b",
          "title": "Object Structure",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/objectStructure.test.js",
          "file": "/test/objectStructure.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for no arguments passed",
              "fullTitle": "Object Structure Check for no arguments passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  getObjectStructure();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "94d7f320-5cd1-496e-9ba1-40ef4b4a03a6",
              "parentUUID": "383e0bf7-667f-4070-828e-c04526c1021b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if null object is detected",
              "fullTitle": "Object Structure Checks if null object is detected",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({})).to.deep.equal({});",
              "err": {},
              "uuid": "1cbec7b5-944a-4037-80b8-ef8b6c957547",
              "parentUUID": "383e0bf7-667f-4070-828e-c04526c1021b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for single level object",
              "fullTitle": "Object Structure Check for single level object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({ name: \"Some Name\", age: 10 })).to.deep.equal({\n  name: \"string\",\n  age: \"number\",\n});",
              "err": {},
              "uuid": "cd1b5089-6019-4c85-8ffc-ab2ee3e86de8",
              "parentUUID": "383e0bf7-667f-4070-828e-c04526c1021b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94d7f320-5cd1-496e-9ba1-40ef4b4a03a6",
            "1cbec7b5-944a-4037-80b8-ef8b6c957547",
            "cd1b5089-6019-4c85-8ffc-ab2ee3e86de8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f1cb8ef1-0971-41a6-870b-36a40915d37b",
          "title": "RGB Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rgbToHexConverter.test.js",
          "file": "/test/rgbToHexConverter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if 7 digit output is sent ",
              "fullTitle": "RGB Converter Check if 7 digit output is sent ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10).length).to.be.equal(7);",
              "err": {},
              "uuid": "c8350876-fa29-4a34-b38c-a71cd29f432b",
              "parentUUID": "f1cb8ef1-0971-41a6-870b-36a40915d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns rgb value",
              "fullTitle": "RGB Converter Returns rgb value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10)).to.equal(\"#0a0a0a\");",
              "err": {},
              "uuid": "13387447-0b2c-455f-b3d2-6d44fb5c8135",
              "parentUUID": "f1cb8ef1-0971-41a6-870b-36a40915d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if input is greater than 255",
              "fullTitle": "RGB Converter Checks if input is greater than 255",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(300, 200, 200);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "97f8812a-28a3-4a4f-b6c3-f3ab13b8476c",
              "parentUUID": "f1cb8ef1-0971-41a6-870b-36a40915d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Takes only three inputs",
              "fullTitle": "RGB Converter Takes only three inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(100, 100, 100, 100);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "d497967c-f658-4268-b84a-66ca0fddaaaf",
              "parentUUID": "f1cb8ef1-0971-41a6-870b-36a40915d37b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only takes integer input",
              "fullTitle": "RGB Converter Only takes integer input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(\"a\", 10, 10);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "81b60f88-1d0d-4c13-94d2-28e36377463e",
              "parentUUID": "f1cb8ef1-0971-41a6-870b-36a40915d37b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8350876-fa29-4a34-b38c-a71cd29f432b",
            "13387447-0b2c-455f-b3d2-6d44fb5c8135",
            "97f8812a-28a3-4a4f-b6c3-f3ab13b8476c",
            "d497967c-f658-4268-b84a-66ca0fddaaaf",
            "81b60f88-1d0d-4c13-94d2-28e36377463e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "00b90d7e-6a63-44a1-9241-92a8db964d8b",
          "title": "Check String rotation",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rotateString.test.js",
          "file": "/test/rotateString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check input ",
              "fullTitle": "Check String rotation Check input ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString();\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "5b9d284a-3144-48fd-acc7-6bdb22d1c116",
              "parentUUID": "00b90d7e-6a63-44a1-9241-92a8db964d8b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks for invalid direction",
              "fullTitle": "Check String rotation Checks for invalid direction",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString(\"Surfboard\", 1, \"some\");\n}).to.throw(\"Invalid Direction\");",
              "err": {},
              "uuid": "6ffdb601-811d-4519-b7c7-f94d937ea1bb",
              "parentUUID": "00b90d7e-6a63-44a1-9241-92a8db964d8b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Left rotation",
              "fullTitle": "Check String rotation Left rotation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"left\")).to.be.equal(\"urfboardS\");",
              "err": {},
              "uuid": "39ee3b31-e435-43da-838d-7771427b2893",
              "parentUUID": "00b90d7e-6a63-44a1-9241-92a8db964d8b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Right rotation",
              "fullTitle": "Check String rotation Right rotation",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"right\")).to.be.equal(\"dSurfboar\");",
              "err": {},
              "uuid": "03fb46f9-5e72-4a7e-bfd5-f0ef57bf05c6",
              "parentUUID": "00b90d7e-6a63-44a1-9241-92a8db964d8b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b9d284a-3144-48fd-acc7-6bdb22d1c116",
            "6ffdb601-811d-4519-b7c7-f94d937ea1bb",
            "39ee3b31-e435-43da-838d-7771427b2893",
            "03fb46f9-5e72-4a7e-bfd5-f0ef57bf05c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}
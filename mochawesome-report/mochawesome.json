{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 15,
    "pending": 0,
    "failures": 6,
    "start": "2021-08-03T09:18:56.628Z",
    "end": "2021-08-03T09:18:56.646Z",
    "duration": 18,
    "testsRegistered": 21,
    "passPercent": 71.42857142857143,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a754a327-536e-46ac-bc40-3bc4b4fe34f7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "770c9e33-6e2d-4cc3-a2c4-5aac6a192255",
          "title": "Addition test",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/addition.test.js",
          "file": "/test/addition.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return sum ",
              "fullTitle": "Addition test Return sum ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(addition(10, 20, 30)).to.equal(60);",
              "err": {},
              "uuid": "5c40e02a-2ff8-444a-bebf-b0952cdace9b",
              "parentUUID": "770c9e33-6e2d-4cc3-a2c4-5aac6a192255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detect empty inputs",
              "fullTitle": "Addition test Detect empty inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function () {\n  addition();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "ea028d78-2f86-450d-a158-f0eade60760b",
              "parentUUID": "770c9e33-6e2d-4cc3-a2c4-5aac6a192255",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detects alphabet inputs",
              "fullTitle": "Addition test Detects alphabet inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  addition(\"a\", \"b\");\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "83b8a17f-be75-4b74-9702-f68012546116",
              "parentUUID": "770c9e33-6e2d-4cc3-a2c4-5aac6a192255",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c40e02a-2ff8-444a-bebf-b0952cdace9b",
            "ea028d78-2f86-450d-a158-f0eade60760b",
            "83b8a17f-be75-4b74-9702-f68012546116"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5e8d1f1-ede0-438d-9a1b-5899a9907b48",
          "title": "Time Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/convertTime.test.js",
          "file": "/test/convertTime.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checks for invalid input",
              "fullTitle": "Time Converter Checks for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  convertTime(\"A\");\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "e3eba119-fa6e-44b6-b69e-7f41575b2538",
              "parentUUID": "d5e8d1f1-ede0-438d-9a1b-5899a9907b48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contains properties {hours, minutes, seconds}",
              "fullTitle": "Time Converter Contains properties {hours, minutes, seconds}",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600)).to.have.property(\"hours\");\n// expect(convertTime(3600)).to.have.property(\"minutes\");\n// expect(convertTime(3600)).to.have.property(\"seconds\");\nexpect(convertTime(3600)).to.have.keys([\"hours\", \"minutes\", \"seconds\"]);",
              "err": {},
              "uuid": "1986b2b5-05e9-44a6-b6ef-c29388722741",
              "parentUUID": "d5e8d1f1-ede0-438d-9a1b-5899a9907b48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check correct conversion",
              "fullTitle": "Time Converter Check correct conversion",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600).hours).to.be.equal(1);\nexpect(convertTime(3600)).to.deep.equal({\n  hours: 1,\n  minutes: 0,\n  seconds: 0,\n});",
              "err": {},
              "uuid": "322cdb15-340f-4033-b4d8-0d746a9e9ec5",
              "parentUUID": "d5e8d1f1-ede0-438d-9a1b-5899a9907b48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3eba119-fa6e-44b6-b69e-7f41575b2538",
            "1986b2b5-05e9-44a6-b6ef-c29388722741",
            "322cdb15-340f-4033-b4d8-0d746a9e9ec5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c23d2d89-f24d-4335-849e-b276fa2b9b62",
          "title": "Frequency Counter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/frequencyCounter.test.js",
          "file": "/test/frequencyCounter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for all objects",
              "fullTitle": "Frequency Counter Check for all objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"aeiou\")).to.have.keys([\"a\", \"e\", \"i\", \"o\", \"u\"]);",
              "err": {},
              "uuid": "4f53a3f2-3842-4dec-b5a4-6f320cb48de9",
              "parentUUID": "c23d2d89-f24d-4335-849e-b276fa2b9b62",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for vowel frequency",
              "fullTitle": "Frequency Counter Check for vowel frequency",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"Surfboard\")).to.deep.equal({\n  a: 1,\n  e: 0,\n  i: 0,\n  o: 1,\n  u: 1,\n});",
              "err": {},
              "uuid": "49f71032-ce8b-4df3-9d94-3575a30ab6d8",
              "parentUUID": "c23d2d89-f24d-4335-849e-b276fa2b9b62",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for invalid input",
              "fullTitle": "Frequency Counter Check for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  frequencyCounter(123);\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "17c163ee-ba4c-4956-9127-5a793d835ef2",
              "parentUUID": "c23d2d89-f24d-4335-849e-b276fa2b9b62",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f53a3f2-3842-4dec-b5a4-6f320cb48de9",
            "49f71032-ce8b-4df3-9d94-3575a30ab6d8",
            "17c163ee-ba4c-4956-9127-5a793d835ef2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e56c60d-671c-473e-8224-43b7a8f945b2",
          "title": "Object Structure",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/objectStructure.test.js",
          "file": "/test/objectStructure.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for no arguments passed",
              "fullTitle": "Object Structure Check for no arguments passed",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  getObjectStructure();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "b641f745-6221-4e53-9ae0-e86de32281e2",
              "parentUUID": "4e56c60d-671c-473e-8224-43b7a8f945b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if null object is detected",
              "fullTitle": "Object Structure Checks if null object is detected",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({})).to.deep.equal({});",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal {}",
                "estack": "AssertionError: expected undefined to deeply equal {}\n    at Context.it (test/objectStructure.test.js:12:44)",
                "diff": null
              },
              "uuid": "1131c603-1634-4ec1-a6de-b2b564b0decb",
              "parentUUID": "4e56c60d-671c-473e-8224-43b7a8f945b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for single level object",
              "fullTitle": "Object Structure Check for single level object",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({ name: \"Some Name\", age: 10 })).to.deep.equal({\n  name: \"string\",\n  age: \"number\",\n});",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal { name: 'string', age: 'number' }",
                "estack": "AssertionError: expected undefined to deeply equal { name: 'string', age: 'number' }\n    at Context.it (test/objectStructure.test.js:16:72)",
                "diff": null
              },
              "uuid": "9c949ea5-b4f9-4b7b-867b-db4f61c4a7b9",
              "parentUUID": "4e56c60d-671c-473e-8224-43b7a8f945b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b641f745-6221-4e53-9ae0-e86de32281e2"
          ],
          "failures": [
            "1131c603-1634-4ec1-a6de-b2b564b0decb",
            "9c949ea5-b4f9-4b7b-867b-db4f61c4a7b9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "83064d78-b92f-4395-9d06-ad6b86bc5518",
          "title": "RGB Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rgbToHexConverter.test.js",
          "file": "/test/rgbToHexConverter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if 7 digit output is sent ",
              "fullTitle": "RGB Converter Check if 7 digit output is sent ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10).length).to.be.equal(7);",
              "err": {},
              "uuid": "6e96cde9-67aa-4f0f-9658-16c5ae0b5221",
              "parentUUID": "83064d78-b92f-4395-9d06-ad6b86bc5518",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns rgb value",
              "fullTitle": "RGB Converter Returns rgb value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10)).to.equal(\"#0a0a0a\");",
              "err": {},
              "uuid": "4042baed-40ec-40af-8d22-b9661f9329c2",
              "parentUUID": "83064d78-b92f-4395-9d06-ad6b86bc5518",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if input is greater than 255",
              "fullTitle": "RGB Converter Checks if input is greater than 255",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(300, 200, 200);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "906b9829-9caa-4b6b-9cc2-3684d97acf41",
              "parentUUID": "83064d78-b92f-4395-9d06-ad6b86bc5518",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Takes only three inputs",
              "fullTitle": "RGB Converter Takes only three inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(100, 100, 100, 100);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "b1b73c25-c830-4aa0-b11b-08c6309d27f4",
              "parentUUID": "83064d78-b92f-4395-9d06-ad6b86bc5518",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only takes integer input",
              "fullTitle": "RGB Converter Only takes integer input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(\"a\", 10, 10);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "10e62a10-8924-47f8-8402-1807c6df4028",
              "parentUUID": "83064d78-b92f-4395-9d06-ad6b86bc5518",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e96cde9-67aa-4f0f-9658-16c5ae0b5221",
            "4042baed-40ec-40af-8d22-b9661f9329c2",
            "906b9829-9caa-4b6b-9cc2-3684d97acf41",
            "b1b73c25-c830-4aa0-b11b-08c6309d27f4",
            "10e62a10-8924-47f8-8402-1807c6df4028"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fcc31748-6e91-4426-945e-1243686b2ad0",
          "title": "Check String rotation",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rotateString.test.js",
          "file": "/test/rotateString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check input ",
              "fullTitle": "Check String rotation Check input ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString();\n}).to.throw(\"Invalid Input\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rotateString.test.js:8:16)",
                "diff": null
              },
              "uuid": "32349723-982f-4a63-9be5-5e91fd7f6052",
              "parentUUID": "fcc31748-6e91-4426-945e-1243686b2ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks for invalid direction",
              "fullTitle": "Check String rotation Checks for invalid direction",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString(\"Surfboard\", 1, \"some\");\n}).to.throw(\"Invalid Direction\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rotateString.test.js:13:16)",
                "diff": null
              },
              "uuid": "a1c0bc8e-b347-4d55-a139-df94702185d2",
              "parentUUID": "fcc31748-6e91-4426-945e-1243686b2ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Left rotation",
              "fullTitle": "Check String rotation Left rotation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"left\")).to.be.equal(\"urfboardS\");",
              "err": {
                "message": "AssertionError: expected undefined to equal 'urfboardS'",
                "estack": "AssertionError: expected undefined to equal 'urfboardS'\n    at Context.it (test/rotateString.test.js:16:56)",
                "diff": null
              },
              "uuid": "fa82a903-9d8a-4215-8305-a75bf71ac836",
              "parentUUID": "fcc31748-6e91-4426-945e-1243686b2ad0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Right rotation",
              "fullTitle": "Check String rotation Right rotation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"right\")).to.be.equal(\"dSurfboar\");",
              "err": {
                "message": "AssertionError: expected undefined to equal 'dSurfboar'",
                "estack": "AssertionError: expected undefined to equal 'dSurfboar'\n    at Context.it (test/rotateString.test.js:19:57)",
                "diff": null
              },
              "uuid": "97fbc4ee-f5c6-4f15-8e4d-e3d426eb6a74",
              "parentUUID": "fcc31748-6e91-4426-945e-1243686b2ad0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "32349723-982f-4a63-9be5-5e91fd7f6052",
            "a1c0bc8e-b347-4d55-a139-df94702185d2",
            "fa82a903-9d8a-4215-8305-a75bf71ac836",
            "97fbc4ee-f5c6-4f15-8e4d-e3d426eb6a74"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}
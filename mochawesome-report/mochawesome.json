{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 19,
    "pending": 0,
    "failures": 2,
    "start": "2021-08-03T10:15:57.695Z",
    "end": "2021-08-03T10:15:57.713Z",
    "duration": 18,
    "testsRegistered": 21,
    "passPercent": 90.47619047619048,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e2c9ad29-4d17-464e-8ca4-ca41087a3712",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "864eb38c-b11b-41a5-a4d3-62c521f7a7b1",
          "title": "Addition test",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/addition.test.js",
          "file": "/test/addition.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return sum ",
              "fullTitle": "Addition test Return sum ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(addition(10, 20, 30)).to.equal(60);",
              "err": {},
              "uuid": "17e2bfe0-c24b-4309-9da6-3db42ed43e23",
              "parentUUID": "864eb38c-b11b-41a5-a4d3-62c521f7a7b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detect empty inputs",
              "fullTitle": "Addition test Detect empty inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function () {\n  addition();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "e7b455dc-4ea4-488e-a3ac-11d9970726f1",
              "parentUUID": "864eb38c-b11b-41a5-a4d3-62c521f7a7b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detects alphabet inputs",
              "fullTitle": "Addition test Detects alphabet inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  addition(\"a\", \"b\");\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "428c676d-c0ef-41a6-b913-03c21f465bae",
              "parentUUID": "864eb38c-b11b-41a5-a4d3-62c521f7a7b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "17e2bfe0-c24b-4309-9da6-3db42ed43e23",
            "e7b455dc-4ea4-488e-a3ac-11d9970726f1",
            "428c676d-c0ef-41a6-b913-03c21f465bae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "94e93a9f-3108-4f80-9ceb-38602a4e2d80",
          "title": "Time Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/convertTime.test.js",
          "file": "/test/convertTime.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checks for invalid input",
              "fullTitle": "Time Converter Checks for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  convertTime(\"A\");\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "0daf9cad-933b-43de-b156-f85cdacdda0d",
              "parentUUID": "94e93a9f-3108-4f80-9ceb-38602a4e2d80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contains properties {hours, minutes, seconds}",
              "fullTitle": "Time Converter Contains properties {hours, minutes, seconds}",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600)).to.have.property(\"hours\");\n// expect(convertTime(3600)).to.have.property(\"minutes\");\n// expect(convertTime(3600)).to.have.property(\"seconds\");\nexpect(convertTime(3600)).to.have.keys([\"hours\", \"minutes\", \"seconds\"]);",
              "err": {},
              "uuid": "7448d65a-43f0-430c-bd49-dc9b4f7cf60b",
              "parentUUID": "94e93a9f-3108-4f80-9ceb-38602a4e2d80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check correct conversion",
              "fullTitle": "Time Converter Check correct conversion",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600).hours).to.be.equal(1);\nexpect(convertTime(3600)).to.deep.equal({\n  hours: 1,\n  minutes: 0,\n  seconds: 0,\n});",
              "err": {},
              "uuid": "bf682472-6f04-4a40-b2e2-179ec47e8707",
              "parentUUID": "94e93a9f-3108-4f80-9ceb-38602a4e2d80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0daf9cad-933b-43de-b156-f85cdacdda0d",
            "7448d65a-43f0-430c-bd49-dc9b4f7cf60b",
            "bf682472-6f04-4a40-b2e2-179ec47e8707"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "79cbbaa9-dc3e-49b4-8d7b-988ea117db7f",
          "title": "Frequency Counter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/frequencyCounter.test.js",
          "file": "/test/frequencyCounter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for all objects",
              "fullTitle": "Frequency Counter Check for all objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"aeiou\")).to.have.keys([\"a\", \"e\", \"i\", \"o\", \"u\"]);",
              "err": {},
              "uuid": "41135fc6-c98a-417c-bfc9-9edaf64db28d",
              "parentUUID": "79cbbaa9-dc3e-49b4-8d7b-988ea117db7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for vowel frequency",
              "fullTitle": "Frequency Counter Check for vowel frequency",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"Surfboard\")).to.deep.equal({\n  a: 1,\n  e: 0,\n  i: 0,\n  o: 1,\n  u: 1,\n});",
              "err": {},
              "uuid": "3fd3d05e-b69f-4a65-a972-1cbddee770ac",
              "parentUUID": "79cbbaa9-dc3e-49b4-8d7b-988ea117db7f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for invalid input",
              "fullTitle": "Frequency Counter Check for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  frequencyCounter(123);\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "b4098983-4030-46c9-a30b-c1e1c70e8392",
              "parentUUID": "79cbbaa9-dc3e-49b4-8d7b-988ea117db7f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41135fc6-c98a-417c-bfc9-9edaf64db28d",
            "3fd3d05e-b69f-4a65-a972-1cbddee770ac",
            "b4098983-4030-46c9-a30b-c1e1c70e8392"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b9bef51-8820-42d4-9f15-f9d9e7fbff89",
          "title": "Object Structure",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/objectStructure.test.js",
          "file": "/test/objectStructure.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for no arguments passed",
              "fullTitle": "Object Structure Check for no arguments passed",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  getObjectStructure();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "92a79e26-a052-467e-afff-10cb6a7b2d05",
              "parentUUID": "1b9bef51-8820-42d4-9f15-f9d9e7fbff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if null object is detected",
              "fullTitle": "Object Structure Checks if null object is detected",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({})).to.deep.equal({});",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal {}",
                "estack": "AssertionError: expected undefined to deeply equal {}\n    at Context.it (test/objectStructure.test.js:12:44)",
                "diff": null
              },
              "uuid": "ceff95cd-2b27-4a3f-94de-879d4e8d6545",
              "parentUUID": "1b9bef51-8820-42d4-9f15-f9d9e7fbff89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for single level object",
              "fullTitle": "Object Structure Check for single level object",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({ name: \"Some Name\", age: 10 })).to.deep.equal({\n  name: \"string\",\n  age: \"number\",\n});",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal { name: 'string', age: 'number' }",
                "estack": "AssertionError: expected undefined to deeply equal { name: 'string', age: 'number' }\n    at Context.it (test/objectStructure.test.js:16:72)",
                "diff": null
              },
              "uuid": "3bee3c5a-a5ae-4f49-a1fc-4aeaea8f04ec",
              "parentUUID": "1b9bef51-8820-42d4-9f15-f9d9e7fbff89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92a79e26-a052-467e-afff-10cb6a7b2d05"
          ],
          "failures": [
            "ceff95cd-2b27-4a3f-94de-879d4e8d6545",
            "3bee3c5a-a5ae-4f49-a1fc-4aeaea8f04ec"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e85ba433-66c6-4bd6-afdc-7be0981f53a4",
          "title": "RGB Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rgbToHexConverter.test.js",
          "file": "/test/rgbToHexConverter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if 7 digit output is sent ",
              "fullTitle": "RGB Converter Check if 7 digit output is sent ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10).length).to.be.equal(7);",
              "err": {},
              "uuid": "343b0569-5ce2-45c5-a365-f1ade3d9ec9f",
              "parentUUID": "e85ba433-66c6-4bd6-afdc-7be0981f53a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns rgb value",
              "fullTitle": "RGB Converter Returns rgb value",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10)).to.equal(\"#0a0a0a\");",
              "err": {},
              "uuid": "a7bb28f2-a023-4d9f-9dfa-1fba2fbbc961",
              "parentUUID": "e85ba433-66c6-4bd6-afdc-7be0981f53a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if input is greater than 255",
              "fullTitle": "RGB Converter Checks if input is greater than 255",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(300, 200, 200);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "b7404807-8616-4cbb-9143-e5e61235ca8b",
              "parentUUID": "e85ba433-66c6-4bd6-afdc-7be0981f53a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Takes only three inputs",
              "fullTitle": "RGB Converter Takes only three inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(100, 100, 100, 100);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "54d0d8fd-56f5-4f57-943a-dec8a6cda6b9",
              "parentUUID": "e85ba433-66c6-4bd6-afdc-7be0981f53a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only takes integer input",
              "fullTitle": "RGB Converter Only takes integer input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(\"a\", 10, 10);\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "b4fc5304-c84d-425c-bcb9-ed4237a62a6c",
              "parentUUID": "e85ba433-66c6-4bd6-afdc-7be0981f53a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "343b0569-5ce2-45c5-a365-f1ade3d9ec9f",
            "a7bb28f2-a023-4d9f-9dfa-1fba2fbbc961",
            "b7404807-8616-4cbb-9143-e5e61235ca8b",
            "54d0d8fd-56f5-4f57-943a-dec8a6cda6b9",
            "b4fc5304-c84d-425c-bcb9-ed4237a62a6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d09472d7-88df-43ba-8376-00a954612a8f",
          "title": "Check String rotation",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rotateString.test.js",
          "file": "/test/rotateString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check input ",
              "fullTitle": "Check String rotation Check input ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString();\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "b3f42108-4b7e-4085-bafc-17e801cc72a5",
              "parentUUID": "d09472d7-88df-43ba-8376-00a954612a8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks for invalid direction",
              "fullTitle": "Check String rotation Checks for invalid direction",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString(\"Surfboard\", 1, \"some\");\n}).to.throw(\"Invalid Direction\");",
              "err": {},
              "uuid": "f68a2608-c955-46d7-9b03-ce5548c0bd12",
              "parentUUID": "d09472d7-88df-43ba-8376-00a954612a8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Left rotation",
              "fullTitle": "Check String rotation Left rotation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"left\")).to.be.equal(\"urfboardS\");",
              "err": {},
              "uuid": "bd13d244-4810-40f8-a58f-15ac6886ab6d",
              "parentUUID": "d09472d7-88df-43ba-8376-00a954612a8f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Right rotation",
              "fullTitle": "Check String rotation Right rotation",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"right\")).to.be.equal(\"dSurfboar\");",
              "err": {},
              "uuid": "597fa835-79ab-4c02-b4e5-bd8048745ed4",
              "parentUUID": "d09472d7-88df-43ba-8376-00a954612a8f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b3f42108-4b7e-4085-bafc-17e801cc72a5",
            "f68a2608-c955-46d7-9b03-ce5548c0bd12",
            "bd13d244-4810-40f8-a58f-15ac6886ab6d",
            "597fa835-79ab-4c02-b4e5-bd8048745ed4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}
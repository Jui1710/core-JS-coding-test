{
  "stats": {
    "suites": 6,
    "tests": 21,
    "passes": 9,
    "pending": 0,
    "failures": 12,
    "start": "2021-08-03T07:18:50.445Z",
    "end": "2021-08-03T07:18:50.463Z",
    "duration": 18,
    "testsRegistered": 21,
    "passPercent": 42.857142857142854,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3c571495-456f-4b42-8564-36660b13428b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a11f5d66-7858-4f4e-81c9-c4e5f412f8e0",
          "title": "Addition test",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/addition.test.js",
          "file": "/test/addition.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Return sum ",
              "fullTitle": "Addition test Return sum ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(addition(10, 20, 30)).to.equal(60);",
              "err": {},
              "uuid": "eec95529-bc04-4085-b39b-1357145fa635",
              "parentUUID": "a11f5d66-7858-4f4e-81c9-c4e5f412f8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detect empty inputs",
              "fullTitle": "Addition test Detect empty inputs",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(function () {\n  addition();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "6cd29ef9-9c95-413d-a4a9-b0cbab157bcf",
              "parentUUID": "a11f5d66-7858-4f4e-81c9-c4e5f412f8e0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Detects alphabet inputs",
              "fullTitle": "Addition test Detects alphabet inputs",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  addition(\"a\", \"b\");\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "525d690e-6e1d-4efa-9c52-7536a6ae2580",
              "parentUUID": "a11f5d66-7858-4f4e-81c9-c4e5f412f8e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eec95529-bc04-4085-b39b-1357145fa635",
            "6cd29ef9-9c95-413d-a4a9-b0cbab157bcf",
            "525d690e-6e1d-4efa-9c52-7536a6ae2580"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "833e9bd5-5fa4-43d2-9980-0895c62199dd",
          "title": "Time Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/convertTime.test.js",
          "file": "/test/convertTime.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Checks for invalid input",
              "fullTitle": "Time Converter Checks for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  convertTime(\"A\");\n}).to.throw(\"Invalid Input\");",
              "err": {},
              "uuid": "e9017b3b-98e9-456d-95f1-4c12d9b8ba9b",
              "parentUUID": "833e9bd5-5fa4-43d2-9980-0895c62199dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Contains properties {hours, minutes, seconds}",
              "fullTitle": "Time Converter Contains properties {hours, minutes, seconds}",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600)).to.have.property(\"hours\");\n// expect(convertTime(3600)).to.have.property(\"minutes\");\n// expect(convertTime(3600)).to.have.property(\"seconds\");\nexpect(convertTime(3600)).to.have.keys([\"hours\", \"minutes\", \"seconds\"]);",
              "err": {},
              "uuid": "97f1a6fb-e4f9-4b6f-a62c-6820d3a3a178",
              "parentUUID": "833e9bd5-5fa4-43d2-9980-0895c62199dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check correct conversion",
              "fullTitle": "Time Converter Check correct conversion",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// expect(convertTime(3600).hours).to.be.equal(1);\nexpect(convertTime(3600)).to.deep.equal({\n  hours: 1,\n  minutes: 0,\n  seconds: 0,\n});",
              "err": {},
              "uuid": "a2556a23-6fc5-4b01-966b-79e09eb7c24a",
              "parentUUID": "833e9bd5-5fa4-43d2-9980-0895c62199dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9017b3b-98e9-456d-95f1-4c12d9b8ba9b",
            "97f1a6fb-e4f9-4b6f-a62c-6820d3a3a178",
            "a2556a23-6fc5-4b01-966b-79e09eb7c24a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "06432ecf-6422-41f3-a3d8-0b4fd9a9f93b",
          "title": "Frequency Counter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/frequencyCounter.test.js",
          "file": "/test/frequencyCounter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for all objects",
              "fullTitle": "Frequency Counter Check for all objects",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"aeiou\")).to.have.keys([\"a\", \"e\", \"i\", \"o\", \"u\"]);",
              "err": {},
              "uuid": "76ac5a22-7802-4156-bdd0-0a0dba3f1a29",
              "parentUUID": "06432ecf-6422-41f3-a3d8-0b4fd9a9f93b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for vowel frequency",
              "fullTitle": "Frequency Counter Check for vowel frequency",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(frequencyCounter(\"Surfboard\")).to.deep.equal({\n  a: 1,\n  e: 0,\n  i: 0,\n  o: 1,\n  u: 1,\n});",
              "err": {},
              "uuid": "429ca03f-1b1c-4602-a1c7-bf612d2c2bc5",
              "parentUUID": "06432ecf-6422-41f3-a3d8-0b4fd9a9f93b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for invalid input",
              "fullTitle": "Frequency Counter Check for invalid input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  frequencyCounter(123);\n}).to.throw(Error, \"Invalid Input\");",
              "err": {},
              "uuid": "934d9c7d-9a4a-41fb-84fe-1c3ef35a0c53",
              "parentUUID": "06432ecf-6422-41f3-a3d8-0b4fd9a9f93b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76ac5a22-7802-4156-bdd0-0a0dba3f1a29",
            "429ca03f-1b1c-4602-a1c7-bf612d2c2bc5",
            "934d9c7d-9a4a-41fb-84fe-1c3ef35a0c53"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "10d970e8-794c-42cf-b2d4-7efa7285605d",
          "title": "Object Structure",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/objectStructure.test.js",
          "file": "/test/objectStructure.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check for no arguments passed",
              "fullTitle": "Object Structure Check for no arguments passed",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  getObjectStructure();\n}).to.throw(Error, \"Invalid Input\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw Error",
                "estack": "AssertionError: expected [Function] to throw Error\n    at Context.it (test/objectStructure.test.js:8:16)",
                "diff": null
              },
              "uuid": "002bdba7-2776-49a8-9049-72bfa26b8208",
              "parentUUID": "10d970e8-794c-42cf-b2d4-7efa7285605d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if null object is detected",
              "fullTitle": "Object Structure Checks if null object is detected",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({})).to.deep.equal({});",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal {}",
                "estack": "AssertionError: expected undefined to deeply equal {}\n    at Context.it (test/objectStructure.test.js:12:44)",
                "diff": null
              },
              "uuid": "2d50c4e2-0182-4d84-92db-0f31dfde7bd5",
              "parentUUID": "10d970e8-794c-42cf-b2d4-7efa7285605d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Check for single level object",
              "fullTitle": "Object Structure Check for single level object",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(getObjectStructure({ name: \"Some Name\", age: 10 })).to.deep.equal({\n  name: \"string\",\n  age: \"number\",\n});",
              "err": {
                "message": "AssertionError: expected undefined to deeply equal { name: 'string', age: 'number' }",
                "estack": "AssertionError: expected undefined to deeply equal { name: 'string', age: 'number' }\n    at Context.it (test/objectStructure.test.js:16:72)",
                "diff": null
              },
              "uuid": "6403ac30-99e9-4260-879e-e8865c6a31f9",
              "parentUUID": "10d970e8-794c-42cf-b2d4-7efa7285605d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "002bdba7-2776-49a8-9049-72bfa26b8208",
            "2d50c4e2-0182-4d84-92db-0f31dfde7bd5",
            "6403ac30-99e9-4260-879e-e8865c6a31f9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a441b70-7f49-4a5f-a2f6-f302df33b46e",
          "title": "RGB Converter",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rgbToHexConverter.test.js",
          "file": "/test/rgbToHexConverter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check if 7 digit output is sent ",
              "fullTitle": "RGB Converter Check if 7 digit output is sent ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10).length).to.be.equal(7);",
              "err": {
                "message": "TypeError: Cannot read property 'length' of undefined",
                "estack": "TypeError: Cannot read property 'length' of undefined\n    at Context.it (test/rgbToHexConverter.test.js:7:42)",
                "diff": null
              },
              "uuid": "5bd15975-7e79-447b-877a-aebfe7f233f3",
              "parentUUID": "5a441b70-7f49-4a5f-a2f6-f302df33b46e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns rgb value",
              "fullTitle": "RGB Converter Returns rgb value",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(rgbToHexConversion(10, 10, 10)).to.equal(\"#0a0a0a\");",
              "err": {
                "message": "AssertionError: expected undefined to equal '#0a0a0a'",
                "estack": "AssertionError: expected undefined to equal '#0a0a0a'\n    at Context.it (test/rgbToHexConverter.test.js:12:47)",
                "diff": null
              },
              "uuid": "11da21e5-41bd-43d9-b4e1-9492e39ef569",
              "parentUUID": "5a441b70-7f49-4a5f-a2f6-f302df33b46e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks if input is greater than 255",
              "fullTitle": "RGB Converter Checks if input is greater than 255",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(300, 200, 200);\n}).to.throw(\"Invalid Input\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rgbToHexConverter.test.js:19:16)",
                "diff": null
              },
              "uuid": "f7098490-b25c-41f8-83be-1499f5861da1",
              "parentUUID": "5a441b70-7f49-4a5f-a2f6-f302df33b46e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Takes only three inputs",
              "fullTitle": "RGB Converter Takes only three inputs",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(100, 100, 100, 100);\n}).to.throw(\"Invalid Input\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rgbToHexConverter.test.js:26:16)",
                "diff": null
              },
              "uuid": "5d57222b-22d2-4259-8ce0-2d70ff4941c3",
              "parentUUID": "5a441b70-7f49-4a5f-a2f6-f302df33b46e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Only takes integer input",
              "fullTitle": "RGB Converter Only takes integer input",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rgbToHexConversion(\"a\", 10, 10);\n}).to.throw(\"Invalid Input\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rgbToHexConverter.test.js:32:16)",
                "diff": null
              },
              "uuid": "99d3cde4-ee88-4241-a90b-7f3c4571c322",
              "parentUUID": "5a441b70-7f49-4a5f-a2f6-f302df33b46e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5bd15975-7e79-447b-877a-aebfe7f233f3",
            "11da21e5-41bd-43d9-b4e1-9492e39ef569",
            "f7098490-b25c-41f8-83be-1499f5861da1",
            "5d57222b-22d2-4259-8ce0-2d70ff4941c3",
            "99d3cde4-ee88-4241-a90b-7f3c4571c322"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6538a79f-fb3c-4087-b613-06d340fdb13f",
          "title": "Check String rotation",
          "fullFile": "/home/juilee/Raw Assesement/core-JS-coding-test/test/rotateString.test.js",
          "file": "/test/rotateString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Check input ",
              "fullTitle": "Check String rotation Check input ",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString();\n}).to.throw(\"Invalid Input\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rotateString.test.js:8:16)",
                "diff": null
              },
              "uuid": "10925afc-a583-4647-a71d-58cd8a29589d",
              "parentUUID": "6538a79f-fb3c-4087-b613-06d340fdb13f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Checks for invalid direction",
              "fullTitle": "Check String rotation Checks for invalid direction",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  rotateString(\"Surfboard\", 1, \"some\");\n}).to.throw(\"Invalid Direction\");",
              "err": {
                "message": "AssertionError: expected [Function] to throw an error",
                "estack": "AssertionError: expected [Function] to throw an error\n    at Context.it (test/rotateString.test.js:13:16)",
                "diff": null
              },
              "uuid": "fb5d2ee8-5604-4a0d-b67d-c7b2d03ff5ea",
              "parentUUID": "6538a79f-fb3c-4087-b613-06d340fdb13f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Left rotation",
              "fullTitle": "Check String rotation Left rotation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"left\")).to.be.equal(\"urfboardS\");",
              "err": {
                "message": "AssertionError: expected undefined to equal 'urfboardS'",
                "estack": "AssertionError: expected undefined to equal 'urfboardS'\n    at Context.it (test/rotateString.test.js:16:56)",
                "diff": null
              },
              "uuid": "d573e52d-189f-41e2-9811-69860cf2c38c",
              "parentUUID": "6538a79f-fb3c-4087-b613-06d340fdb13f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Right rotation",
              "fullTitle": "Check String rotation Right rotation",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "expect(rotateString(\"Surfboard\", 1, \"right\")).to.be.equal(\"dSurfboar\");",
              "err": {
                "message": "AssertionError: expected undefined to equal 'dSurfboar'",
                "estack": "AssertionError: expected undefined to equal 'dSurfboar'\n    at Context.it (test/rotateString.test.js:19:57)",
                "diff": null
              },
              "uuid": "69c676d6-8d69-4e68-b538-6541579526b1",
              "parentUUID": "6538a79f-fb3c-4087-b613-06d340fdb13f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "10925afc-a583-4647-a71d-58cd8a29589d",
            "fb5d2ee8-5604-4a0d-b67d-c7b2d03ff5ea",
            "d573e52d-189f-41e2-9811-69860cf2c38c",
            "69c676d6-8d69-4e68-b538-6541579526b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}